/******************01背包问题************************

 * 给定 n 件物品，物品的重量为 w[i]，
 * 物品的价值为 c[i]。
 * 现挑选物品放入背包中，
 * 假定背包能承受的最大重量为 V，
 * 问应该如何选择装入背包中的物品，
 * 使得装入背包中物品的总价值最大？


#include<iostream>
#include<vector>
using namespace std;

int maxVaule(vector<int> vaule, vector<int> weight,int Weight)
{
    //vaule和weigh数组容量一致，表示总共有多少件物体
    int n = vaule.size();
    //保证索引从零开始，且初始化为0
    int dp[n+1][Weight+1];
    for(int i = 0;i<Weight+1;i++)
    for(int j = 0;j<n+1;j++)
        dp[j][i] = 0;
    for(int item=1;item<n+1;item++)
        for(int bag_weight=1;bag_weight<Weight+1;bag_weight++)
        {
            //vaule,weight的索引需要减一
            int withThis = bag_weight>=weight[item-1]?vaule[item-1] + dp[item-1][bag_weight-weight[item-1]]:0;
            int withoutThis = dp[item-1][bag_weight];
            dp[item][bag_weight] = max(withThis,withoutThis);
        }
    return dp[n][Weight];

}

int main()
{
    vector<int> vaule;
    vaule.push_back(3000);
    vaule.push_back(2000);
    vaule.push_back(1500);
    vector<int> weight;
    weight.push_back(4);
    weight.push_back(3);
    weight.push_back(1);

    x = weight.back();
    weight.pop_back();
    int val = maxVaule(vaule,weight,4);
    cout<<val<<endl;

    return 0;
}

***/


/************根据先序和中序遍历重建二叉树****************
    TreeNode* rebuildTree(vector<int> &preorder_tree,vector<int> &inorder_tree,int pLeft,int pRight,int iLeft,int iRight ){
        if(pRight<pLeft)return NULL;
        int root_val = preorder_tree[pLeft];
        int root_index_in;
        for(int i=iLeft;i<=iRight;i++)if(inorder_tree[i]==root_val){root_index_in = i-iLeft;break;}
        TreeNode* root = new TreeNode(root_val);
        root->left = rebuildTree(preorder_tree,inorder_tree,pLeft+1,pLeft+root_index_in,iLeft,iLeft+root_index_in-1);
        root->right = rebuildTree(preorder_tree,inorder_tree,pLeft+root_index_in+1,pRight,iLeft+root_index_in+1,iRight);
        return root;

    }

****/


/************先序(中序)非递归遍历二叉树*****************

typedef struct TreeNode{
    int data;
    struct TreeNode *lChild;
    struct TreeNode *rChild;
}TreeNode;


void preOrder(TreeNode *T){
    TreeNode *stack[15];
    int top = -1;
    TreeNode *p = T;
    while(p!=NULL||top!=-1){
        if(p!=NULL){
            stack[++ top] = p;
            printf("%d\t",p->data); //入栈时，访问输出
            p = p->lChild;
        }else{
            p = stack[top --];
            p = p->rChild;
        }
    }
}
***/


/*******************中序递归遍历二叉树*****************
   void Inorder(TreeNode* root)
    {
        if(root==nullptr) return;

        Inorder(root->left);
        *
        * code...
        *
        Inorder(root->right);
    }
***/


/******************后续非递归遍历二叉树*******************
vector<int> postorderTraversal(TreeNode* root) {
    vector<int> output;
    if (!root) {
        return output;
    }

    stack<TreeNode*> s;
    TreeNode* prev = NULL;

    while (root || !s.empty()) {
        while (root) {
            s.push(root);
            root = root->left;
        }

        TreeNode* curr = s.top();

        if (curr->right && curr->right != prev) {
            root = curr->right;
        } else {
            output.push_back(curr->val);
            s.pop();
            prev = curr;
        }
    }

    return output;
}
***/

/*******************层次遍历二叉树1*******************
vector<vector<int>> levelOrder(TreeNode* root) {
    vector<vector<int>> result;
    queue<TreeNode *> nodeQueue;
    nodeQueue.push(root);

    TreeNode* p = nullptr;
    while(!nodeQueue.empty())
    {
        p = nodeQueue.front();
        cout<<p->val<<endl;
        nodeQueue.pop();
        if(p->left) nodeQueue.push(p->left);
        if(p->right) nodeQueue.push(p->right);
    }
    return result;
}
***/


/*******************层次遍历二叉树2（保留结点信息版）****
vector<vector<int>> levelOrder(TreeNode* root) {
    vector<vector<int>> result;
    if(root == nullptr) return result;
    vector<int> temp;
    vector<TreeNode *> nodeQueue(1200);
    int front = -1;
    int rear = -1;
    int last = 0;

    rear++;
    nodeQueue[rear] = root;
    TreeNode* p = nullptr;
    while(front<rear)
    {
        front++;
        p = nodeQueue[front];
        temp.push_back(p->val);
        if(p->left)
        {
            rear++;
            nodeQueue[rear] = p->left;
        }
        if(p->right)
        {
            rear++;
            nodeQueue[rear] = p->right;
        }
        if(front == last)
        {

            result.push_back(temp);
            temp.clear();
            last = rear;
        }
    }
    return result;
}
***/


/******************层次遍历二叉树3（保留层次信息版）******
    Node* connect(Node* root) {
    if(root==nullptr)return root;
    queue<Node *> nodeQueue;
    nodeQueue.push(root);
    Node* last = root;

    Node* p = nullptr;
    Node* finPush = nullptr;

    while(!nodeQueue.empty())
    {
        p = nodeQueue.front();
        nodeQueue.pop();
        if(p->left) {
            finPush = p->left;
            nodeQueue.push(p->left);
        }
        if(p->right){
            finPush = p->right;
            nodeQueue.push(p->right);
        }
        if(last == p)
        {
            last = finPush;
        }
    }
    return root;
    }
***/


/************************全排列***********************

auto mySwap = [](int &a,int &b){ int temp=a;a=b;b=temp; };
class Solution {
public:

    void myPermute(vector<vector<int>> &result,vector<int>& nums,int layer,int n){
        if(layer==n){
            result.push_back(nums);
            return;
        }
        for(int i = layer;i<n;i++){
            mySwap(nums[i],nums[layer]);
            myPermute(result,nums,layer+1,n);
            mySwap(nums[i],nums[layer]);
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;
        myPermute(result,nums,0,nums.size());
        return result;
    }
};

***/


/**********************快速排序***********************
void quicksort(vector<int>& nums,int start,int end){
    if(start>=end) return;
    int i = start;
    int j = end;
    int temp = nums[start];

    while(i<j)
    {
        while(i<j&&nums[j]>=temp)j--;
        if(i<j)
        {
            nums[i] = nums[j];
            i++;
        }
        while(i<j&&nums[i]<=temp)i++;
        if(i<j)
        {
            nums[j] = nums[i];
            j--;
        }

    }
    nums[i] = temp;
    quicksort(nums,start,i-1);
    quicksort(nums,i+1,end);
}
***/


/**********************求对数且向上取整****************
double log2Up(int n)
{
    return ceil(log(n+1)/log(2));
}
***/


/*******************KMP算法生成next数组****************


void getNext(string substr,vector<int >& next)
{
    int i=0;
    int j = -1;
    next[i] = j;
    while(i<substr.length())
    {
        if(j==-1 || substr[i] == substr[j])
        {
            j++;
            i++;
            next[i] = j;
        }else
        {
            j = next[j];
        }
    }
}

****/
